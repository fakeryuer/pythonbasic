#内嵌函数：
def fun1():
    print('fun1()在被调用')

    def fun2():
        print('fun2()在被调用')
    fun2()


#闭包：
def fx(x):

    def fy(y):
        return x*y
    return fy


# 利用闭包，我们实际上创建了泛函——f1 f2等类似的函数。
f1 = fx(2)
f2 = fx(4)
print(f1(3))
print(f2(5))

'''
闭包是函数里面嵌套函数，外层函数返回里层函数，这种情况称之为闭包；
闭包是概念，不是某种函数类型，和递归的概念类似，就是种特殊的函数调用；
闭包可以得到外层函数的局部变量，是函数内部和函数外部沟通的桥梁；

闭包有效的减少了函数所需定义的参数数目。这对于并行运算来说有重要的意义。
在并行运算的环境下，我们可以让每台电脑负责一个函数，然后将一台电脑的输出和下一台电脑的输入串联起来。
最终，我们像流 水线一样工作，从串联的电脑集群一端输入数据，从另一端输出数据。
这样的情境最适合只有一个参数输入的函数。闭包就可以实现这一目的。
'''